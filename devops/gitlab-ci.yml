image: python:3.9

variables:
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"

cache:
  paths:
    - "${PIP_CACHE_DIR}"

stages:
  - test
  - build

before_script:
  - pip install -r requirements/requirements-build.txt

validate-test-py38:
  stage: test
  image: python:3.8
  script:
    - tox -e py38
  artifacts:
    when: always
    reports:
      junit: junit-report.xml
      cobertura: coverage.xml

validate-test-py39:
  stage: test
  image: python:3.9
  script:
    - tox -e py39
  artifacts:
    when: always
    reports:
      junit: junit-report.xml
      cobertura: coverage.xml

validate-test-py310:
  stage: test
  image: python:3.10
  script:
    - tox -e py310
  artifacts:
    when: always
    reports:
      junit: junit-report.xml
      cobertura: coverage.xml

dist-build-publish:
  stage: build
  needs:
    - validate-test-py38
    - validate-test-py39
    - validate-test-py310
  variables:
    TWINE_USERNAME: gitlab-ci-token
    TWINE_PASSWORD: ${CI_JOB_TOKEN}
    REPO_URL: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
  before_script:
    - bash devops/scripts/build.sh
  script:
    - bash devops/scripts/dist-publish.sh

image-build-publish:
  stage: build
  needs:
    - validate-test-py38
    - validate-test-py39
    - validate-test-py310
  image: docker:latest
  services:
    - docker:dind
  variables:
    IMAGE_NAME: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - docker build -f devops/Dockerfile -t ${IMAGE_NAME} .
    - sh devops/scripts/test-builds.sh ${IMAGE_NAME}
    - docker push ${IMAGE_NAME}
