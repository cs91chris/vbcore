image: python:3.10

variables:
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
  PY_VER: "py310"

cache:
  paths:
    - "${PIP_CACHE_DIR}"

stages:
  - prerequisites
  - lint
  - cqa
  - test
  - build

before_script:
  - make install-deps

format:
  stage: prerequisites
  script:
    - make format

security:
  stage: prerequisites
  script:
    - make security

flake:
  stage: lint
  needs:
    - format
  script:
    - make flake

pylint:
  stage: lint
  needs:
    - format
  script:
    - make pylint

mypy:
  stage: lint
  needs:
    - format
  script:
    - make mypy

bandit:
  stage: cqa
  needs:
    - flake
    - pylint
    - mypy
  script:
    - make bandit-report bandit
  artifacts:
    when: always
    paths:
      - bandit-report.html

radon:
  stage: cqa
  needs:
    - flake
    - pylint
    - mypy
  script:
    - make radon-cc-report radon
  artifacts:
    when: always
    paths:
      - radon-cc-report.md

test:
  stage: test
  script:
    - make test-coverage
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    paths:
      - junit-report.xml
      - coverage.xml
    reports:
      junit: junit-report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

dist-build-publish:
  stage: build
  only:
    - tags
  needs:
    - test
    - security
  variables:
    TWINE_USERNAME: gitlab-ci-token
    TWINE_PASSWORD: ${CI_JOB_TOKEN}
    REPO_URL: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
  before_script:
    - bash devops/scripts/build.sh
  script:
    - bash devops/scripts/dist-publish.sh

image-build-publish:
  stage: build
  only:
    - tags
  needs:
    - test
    - security
  image: docker:latest
  services:
    - docker:dind
  variables:
    IMAGE_NAME: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - docker build -f devops/Dockerfile -t ${IMAGE_NAME} .
    - sh devops/scripts/test-builds.sh ${IMAGE_NAME}
    - docker push ${IMAGE_NAME}
